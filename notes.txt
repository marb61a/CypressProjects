Cypress Testing
    - https://www.cypress.io/ 
    - Before Cypress a tester would have to use multiple tools including
        - A framework such as Mocha, Karma, Jasmine
        - An assertion library like Chai or Expect.js
        - Install the Selenium package
        - Selenium wrappers such as Protractor, Nightwatch and Webdriver
        - Cypress replaces all of this
    - Cypress does not use Selenium and has a different architecture
        - Selenium executes remote command through the network
        - Cypress runs in the same loop as the application 
    - Cypress is not a general automation tool it is an end to end testing tool (E2E)
    - Cypress will work with any framework and on any website
        - It does not matter the JS framework or if the pages are server rendered
    - Cypress tests are written in JavaScript
    - Cypress can be used by both developers and QA testers
    - Cypress runs faster than other frameworks both from  its architecture
        - Also the fact that development can happen simultaneously to testing speeds up the process

Differences between Cypress and Others (Pros and Cons)
    - Ease of setup
        - A single command using npm to Install -> npm install cypress --save-dev
    - Speed and stability
        - Uses JS the main web language and runs inside the browser
    - Flake Resistant
        - Cypress is notified quickly when the page loads and unloads
        - It is impossible for Cypress to miss elements when events are fired
    - API testing
        - Cypress has the ability to test and mock API
    - JavaScript
        - There is a need to know JavaScript
    - Mobile Testing
        - Although viewport adjustment is available there is no support for mobile testing
    - Domain and Tabs
        - There is only a single domain and tab available
    - Dashboard Service
        - In order to have a large amount of tests and recordings it is necessary to use the dashboard Service
        - This is a monthly fee which also helps pay for continued development of Cypress
        - https://www.cypress.io/dashboard

Opening Cypress
    - Use the following command to open Cypress
        - ./node_modules/.bin/ cypress open
        - This can be changed in the npm script in package.json
            - For example -> "launchcypress": "./node_modules/.bin/cypress open"  
            - This then runs using npm run launchcypress
    - When opening Cypress for the first time there will need to be time added for initialisation
        - There will also be a Cypress folder generated
        - This will setup a folder structure
            - Screenshots will store images of tests
            - Support is used to store custom files and commands
                - The index.js file is the first file that cypress investigates
                    - This will be for imports, additional libraries, event listeners and others too
                - commands.js will be used to store common and custom commands
            - Plugins folder is where plugins to extend cypress functionality are stored
            - The integration folder will be the folder where test files are located
                - This is where the cypress test runner will look to locate test files
            - Fixtures is where test data objects, mocked objects and other test data are kept
                - These will be mostly JSON files
        - Also generated will be a cypress.json file
            - This will allow for the changing default settings

Cypress Updates
    - To update Cypress is easy
    - The test runner GUI will notify when updates are available
    - There will even be some recommended commands available to use (npm/yarn)
    - Changes can be seen in the changelog available at
        - https://docs.cypress.io/guides/references/changelog.html#5-5-0

Cypress API
    - https://docs.cypress.io/api/api/table-of-contents.html
    - Shows available prebuilt commands

Mocha
    - https://mochajs.org/
    - Mocha is a JavaScript test framework
    - It comes prebundled with 2 function calls
        - These are describe() and it() each of which has a specific purpose
        - describe()
            - Simply a way to group tests together in Mocha
            - It takes 2 arguments, the first is the name of the test group and the second is a callback function
        - it()
            - This is a way to describe each individual test case 
            - There should be a description that makes sense for the test case

!!!
    - To see Cypress documents on a specific command
    - On Windows hold the ctrl key and left click the Cypress command

Selector Playground
    - Available in the Cypress test runner
    - This feature will highlight the various elements and when left click this will be preserved
    - There is also an option to copy the get command to the clipboard

Options
    - When an element has an id but can not be clicked
    - There are a number of options available including forcing to true
    
